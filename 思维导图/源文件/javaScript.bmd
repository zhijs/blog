<?xml version="1.0" encoding="utf-8"?>
<map name="javaScript" document_type="Blumind" editor_version="1.3.16.0">
  <!--Create by Blumind, you can download it free from http://www.blumind.org/download-->
  <info />
  <layout>MIND_MAP</layout>
  <attributes>
    <item name="editor_show_sidebar">True</item>
  </attributes>
  <style>
    <back_color>White</back_color>
    <fore_color>Black</fore_color>
    <line_color>LightSlateGray</line_color>
    <border_color>SlateGray</border_color>
    <node_back_color>LightGray</node_back_color>
    <node_fore_color>Black</node_fore_color>
    <select_color>RoyalBlue</select_color>
    <hover_color>MediumSlateBlue</hover_color>
    <link_line_color>Green</link_line_color>
  </style>
  <nodes>
    <node text="JavaSript">
      <style>
        <back_color>Lime</back_color>
        <fore_color>Black</fore_color>
        <border_color>Black</border_color>
        <padding>12</padding>
      </style>
      <nodes>
        <node text="闭包" />
        <node text="对象">
          <nodes>
            <node text="原型链" />
            <node text="函数" />
            <node text="属性">
              <nodes>
                <node text="数据属性">
                  <nodes>
                    <node text="configurable&#xD;&#xA;----------------&#xD;&#xA;默认为 true">
                      <nodes>
                        <node text="表示能否通过 delete 删除属性，从而&#xD;&#xA;重新定义属性&#xD;&#xA;能否修改属性的特性&#xD;&#xA;能否把属性修改为访问器属性&#xD;&#xA;---------------------------------------&#xD;&#xA;如果被设置为 false, 则无法 delete 删除&#xD;&#xA;该属性，无法再次 defineProperty 操作">
                          <nodes>
                            <node text="严格模式中, 对  configurable 为 false 的数据&#xD;&#xA;进行 delete 等操作会报错" />
                          </nodes>
                        </node>
                      </nodes>
                    </node>
                    <node text="enumerable&#xD;&#xA;--------------&#xD;&#xA;默认为 true">
                      <nodes>
                        <node text="是否可用通过 for-in 循环该属性" />
                      </nodes>
                    </node>
                    <node text="writable&#xD;&#xA;--------------&#xD;&#xA;默认为 true">
                      <nodes>
                        <node text="表示能否修改属性的值">
                          <nodes>
                            <node text="严格模式中, 对  writable为 false 的数据&#xD;&#xA;进行赋值" />
                          </nodes>
                        </node>
                      </nodes>
                    </node>
                    <node text="value&#xD;&#xA;---------------------&#xD;&#xA;默认为 undefined">
                      <nodes>
                        <node text="包含这个属性的属性值&#xD;&#xA;读取的时候，从这个位置读&#xD;&#xA;写入的时候，把新值保存在这个位置" />
                      </nodes>
                    </node>
                  </nodes>
                </node>
                <node text="访问器属性" />
              </nodes>
            </node>
          </nodes>
        </node>
        <node text="数据类型">
          <nodes>
            <node text="基本数据类型&#xD;&#xA;--------------&#xD;&#xA;6 种">
              <nodes>
                <node text="Undefined" />
                <node text="Null" />
                <node text="Boolean" />
                <node text="Number" />
                <node text="String" />
                <node text="Symbol&#xD;&#xA;----------&#xD;&#xA;ES6 新增" />
              </nodes>
            </node>
            <node text="复杂数据类型&#xD;&#xA;---------------&#xD;&#xA;1 种">
              <nodes>
                <node text="Object" />
              </nodes>
            </node>
          </nodes>
        </node>
        <node text="模块化">
          <nodes>
            <node text="规范">
              <nodes>
                <node text="CommonJS ">
                  <nodes>
                    <node text="导出 lib.js, 只能用 exports 导出&#xD;&#xA;----------------------------------&#xD;&#xA;exports.lib = function () {}" />
                    <node text="导入&#xD;&#xA;------------------------------&#xD;&#xA;const libFn = require('lib.js').lib" />
                  </nodes>
                </node>
                <node text="CommonJS ">
                  <nodes>
                    <node text="在 commonJS 规范上增加了一个&#xD;&#xA;module.exports 导出" />
                  </nodes>
                </node>
                <node text="umd">
                  <nodes>
                    <node text="UMD (Universal Module Definition)&#xD;&#xA;就是一种javascript通用模块定义规范&#xD;&#xA;让你的模块能在javascript所有运行环境中发挥作用。">
                      <nodes>
                        <node>
                          <widgets>
                            <widget type="PICTURE" align="Left" hyperlink=""><![CDATA[]]></widget>
                          </widgets>
                        </node>
                      </nodes>
                    </node>
                  </nodes>
                </node>
              </nodes>
            </node>
          </nodes>
        </node>
        <node text="Promise">
          <nodes>
            <node text="异常捕获" />
          </nodes>
        </node>
        <node text="ES6">
          <nodes>
            <node text="Reflect">
              <nodes>
                <node text="是一个内置的对象，它提供拦截 JavaScript 操作的方法。&#xD;&#xA;Reflect不是一个函数对象，因此它是不可构造的。&#xD;&#xA;Reflect 的所有的方法都是静态的就和 Math 一样">
                  <nodes>
                    <node text="静态方法">
                      <nodes>
                        <node text="defineProperty">
                          <nodes>
                            <node text="与Object.defineProperty类似，但是当对象无法定义时&#xD;&#xA;Object.defineProperty 会报错而 Reflect.defineProperty 不会，&#xD;&#xA;它会返回false，成功时返回true,如果不是对象还是会报错" />
                          </nodes>
                        </node>
                        <node text="getPrototypeOf(target)">
                          <nodes>
                            <node text="与Object.getPrototypeOf 一样，返回指定对象的原型。" />
                          </nodes>
                        </node>
                        <node text="setPrototypeOf(target,  prototype)">
                          <nodes>
                            <node text="它将指定对象的原型设置为另外一个对象。&#xD;&#xA;----------------------------------------&#xD;&#xA;target.__proto__ = prototype" />
                          </nodes>
                        </node>
                        <node text="getOwnPropertyDescriptor(target, propertyKey)">
                          <nodes>
                            <node text="如果在对象中存在，则返回给定的属性的属性描述符。" />
                          </nodes>
                        </node>
                        <node text="isExtensible(target)">
                          <nodes>
                            <node text="与Object.isExtensible类似，判断一个对象是否可扩展&#xD;&#xA;（是否可以在它上面添加新的属性），它们的不同点是&#xD;&#xA;当参数不是对象时（原始值），Object的将它强&#xD;&#xA;制转变为一个对象，Reflect是直接报错" />
                          </nodes>
                        </node>
                        <node text="preventExtensions(target)">
                          <nodes>
                            <node text=" 与 Object.preventExtensions 类似&#xD;&#xA;阻止新属性添加到对象，不同点和上一条一样。" />
                          </nodes>
                        </node>
                        <node text="apply(func, thisArg, args)">
                          <nodes>
                            <node text="Function.prototype.apply.call(fn, obj, args)一样" />
                          </nodes>
                        </node>
                        <node text="ownKeys(target)">
                          <nodes>
                            <node text="Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))&#xD;&#xA;一样，返回一个包含所有自身属性（不包含继承属性）的数组" />
                          </nodes>
                        </node>
                        <node text="has(target, key)">
                          <nodes>
                            <node text="与in操作符一样，让判断操作都变成函数行为。" />
                          </nodes>
                        </node>
                        <node text="deleteProperty(target, key)">
                          <nodes>
                            <node text="与delete操作符一样，让删除操作变成函数行为，返回布尔值代表成功或失败。" />
                          </nodes>
                        </node>
                        <node text="Reflect.get(target, propertyKey[, receiver])">
                          <style>
                            <back_color>Red</back_color>
                          </style>
                          <nodes>
                            <node text="与 target[key] 一样&#xD;&#xA;如果target对象中指定了getter，receiver则为getter调用时的this值">
                              <style>
                                <back_color>Red</back_color>
                              </style>
                            </node>
                          </nodes>
                        </node>
                        <node text="Reflect.set(target, key, value[, receiver])">
                          <style>
                            <back_color>Red</back_color>
                          </style>
                          <nodes>
                            <node text="设置 target 对象的 key 属性等于value&#xD;&#xA;如果遇到 setter，receiver 则为 setter 调用时的 this 值">
                              <style>
                                <back_color>Red</back_color>
                              </style>
                            </node>
                          </nodes>
                        </node>
                      </nodes>
                    </node>
                  </nodes>
                </node>
              </nodes>
            </node>
            <node text="proxy&#xD;&#xA;">
              <nodes>
                <node text="对象用于定义基本操作的自定义行为&#xD;&#xA;（如属性查找、赋值、枚举、函数调用等）。&#xD;&#xA;-------------------------------------------------&#xD;&#xA;Proxy 对象就是可以让你去对 JavaScript 中的&#xD;&#xA;一切合法对象的基本操作进行自定义&#xD;&#xA;然后用你自定义的操作去覆盖其对象的基本操作&#xD;&#xA;也就是当一个对象去执行一个基本操作时&#xD;&#xA;其执行的过程和结果是你自定义的,而不是对象的.">
                  <nodes>
                    <node text="const p = new Proxy(target, handler)">
                      <nodes>
                        <node text="target 是你要代理的对象.它可以是JavaScript&#xD;&#xA;中的任何合法对象.如: (数组, 对象, 函数等等)" />
                        <node text="handler 是你要自定义操作方法的一个集合">
                          <nodes>
                            <node text="get/set">
                              <nodes>
                                <node>
                                  <widgets>
                                    <widget type="PICTURE" align="Left" hyperlink=""><![CDATA[]]></widget>
                                  </widgets>
                                </node>
                              </nodes>
                            </node>
                            <node text="getPrototypeOf" />
                            <node text="setPrototypeOf" />
                            <node text="..... 和 Reflect 具有相同的方法" />
                          </nodes>
                        </node>
                        <node text="p 是一个被代理后的新对象,它拥有 target 的一切属性和方法&#xD;&#xA;只不过其行为和结果是在 handler 中自定义的" />
                      </nodes>
                    </node>
                  </nodes>
                </node>
              </nodes>
            </node>
          </nodes>
        </node>
      </nodes>
    </node>
  </nodes>
</map>